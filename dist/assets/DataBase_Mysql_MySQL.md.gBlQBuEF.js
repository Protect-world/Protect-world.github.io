import{_ as p,c as t,a as e,R as r,k as a,o as l}from"./chunks/framework.wu3_GR8D.js";const M=JSON.parse('{"title":"MySQL数据库笔记","description":"","frontmatter":{},"headers":[],"relativePath":"DataBase/Mysql/MySQL.md","filePath":"DataBase/Mysql/MySQL.md","lastUpdated":null}'),o={name:"DataBase/Mysql/MySQL.md"},h=r(`<h1 id="mysql数据库笔记" tabindex="-1">MySQL数据库笔记 <a class="header-anchor" href="#mysql数据库笔记" aria-label="Permalink to &quot;MySQL数据库笔记&quot;">​</a></h1><hr><h3 id="一、认识数据库" tabindex="-1">一、认识数据库 <a class="header-anchor" href="#一、认识数据库" aria-label="Permalink to &quot;一、认识数据库&quot;">​</a></h3><h4 id="_1、数据库的好处" tabindex="-1">1、数据库的好处 <a class="header-anchor" href="#_1、数据库的好处" aria-label="Permalink to &quot;1、数据库的好处&quot;">​</a></h4><p>​ 1&gt;持久化数据到本地</p><p>​ 2&gt;可以实现结构化查询，方便管理</p><h4 id="_2、数据库相关概念-※" tabindex="-1">2、数据库相关概念 ※ <a class="header-anchor" href="#_2、数据库相关概念-※" aria-label="Permalink to &quot;2、数据库相关概念 ※&quot;">​</a></h4><p>​ DB:数据库(database):存储数据的&quot;仓库&quot;。它保存了一系列有组织的数据。</p><p>DBMS:数据库管理系统(Database Management System). 数据库是通过DBMS创建和操作的容器</p><p>​ SQL:结构化查询语言(Structure Query Language): 专门用来与数据库通信的语言。</p><p>​ SQL优点：</p><p>​ 1&gt;不是特定的某个特定数据库供应商专有的语言，几乎所欲哦DBMS都支持SQL</p><p>​ 2&gt;简单易学</p><p>​ 3&gt;虽然简单，但实际上以一种强有力的语言,灵活使用其语言元素，可以进行非常复杂和高级的数据库操作。</p><h4 id="_3、数据库如何存储数据" tabindex="-1">3、数据库如何存储数据 <a class="header-anchor" href="#_3、数据库如何存储数据" aria-label="Permalink to &quot;3、数据库如何存储数据&quot;">​</a></h4><p>​ 1&gt;将数据放到表中,表再放到库中</p><p>​ 2&gt;一个数据库中可以有多个表,每个表都有一个的名字,用来标识自己。表名具有唯一性。</p><p>​ 3&gt;表具有一些特性,这些特性定义了数据再表中如何存储，类似java中&quot;类&quot;的设计。</p><p>​ 4&gt;表由列组成，我们也称为字段。所有表都是由一个或多个列组成的，每一列类似的java中的&quot;属性&quot;</p><p>​ 5&gt;表中的数据是按行存储的，每一行类似于java中的&quot;对象&quot;。</p><h4 id="_4、mysql服务的启动和停止" tabindex="-1">4、MySQL服务的启动和停止 <a class="header-anchor" href="#_4、mysql服务的启动和停止" aria-label="Permalink to &quot;4、MySQL服务的启动和停止&quot;">​</a></h4><p>​ 方式一：计算机——右击管理——服务</p><p>​ 方式二：通过管理员身份运行</p><p>​ net start 服务名(启动服务)</p><p>​ net stop 服务名(停止服务)</p><h4 id="_5、mysql服务的登录和退出" tabindex="-1">5、MySQL服务的登录和退出 <a class="header-anchor" href="#_5、mysql服务的登录和退出" aria-label="Permalink to &quot;5、MySQL服务的登录和退出&quot;">​</a></h4><p>​ 打开cmd——输入mysql -uroot -p——输入密码</p><h4 id="_6、mysql的常见命令" tabindex="-1">6、MySQL的常见命令 <a class="header-anchor" href="#_6、mysql的常见命令" aria-label="Permalink to &quot;6、MySQL的常见命令&quot;">​</a></h4><h5 id="_6-1-查看当前所有的数据库" tabindex="-1">6.1 查看当前所有的数据库 <a class="header-anchor" href="#_6-1-查看当前所有的数据库" aria-label="Permalink to &quot;6.1  查看当前所有的数据库&quot;">​</a></h5><p>​ <em>show databases;</em></p><h5 id="_6-2-打开指定的库" tabindex="-1">6.2 打开指定的库 <a class="header-anchor" href="#_6-2-打开指定的库" aria-label="Permalink to &quot;6.2  打开指定的库&quot;">​</a></h5><p>​ <em>use 库名</em></p><h5 id="_6-3-查看当前库的所有表" tabindex="-1">6.3 查看当前库的所有表 <a class="header-anchor" href="#_6-3-查看当前库的所有表" aria-label="Permalink to &quot;6.3  查看当前库的所有表&quot;">​</a></h5><p>​ <em>show tables;</em></p><h5 id="_6-4-查看其他库的所有表" tabindex="-1">6.4 查看其他库的所有表： <a class="header-anchor" href="#_6-4-查看其他库的所有表" aria-label="Permalink to &quot;6.4  查看其他库的所有表：&quot;">​</a></h5><p>​ <em>show tables from 库名;</em></p><h5 id="_6-5-创建表" tabindex="-1">6.5 创建表 <a class="header-anchor" href="#_6-5-创建表" aria-label="Permalink to &quot;6.5  创建表&quot;">​</a></h5><p>​ <em>creat table 表明(</em></p><p>​ <em>列名 列类型,</em></p><p>​ <em>列名 列类型,</em></p><p>​ <em>...</em></p><p>​ <em>);</em></p><h5 id="_6-6-查看表结构" tabindex="-1">6.6 查看表结构 <a class="header-anchor" href="#_6-6-查看表结构" aria-label="Permalink to &quot;6.6  查看表结构&quot;">​</a></h5><p>​ <em>desc 表名;</em></p><h5 id="_6-7-查看服务器的版本" tabindex="-1">6.7 查看服务器的版本 <a class="header-anchor" href="#_6-7-查看服务器的版本" aria-label="Permalink to &quot;6.7  查看服务器的版本&quot;">​</a></h5><p>​ <em>方式一：登录到mysql服务端</em></p><p>​ <em>select version();</em></p><p>​ <em>方式二：没有登录到mysql服务器</em></p><p>​ <em>mysql --version 或</em></p><p>​ <em>mysql -V</em></p><h4 id="_7、mysql的语法规范" tabindex="-1">7、MySQL的语法规范 <a class="header-anchor" href="#_7、mysql的语法规范" aria-label="Permalink to &quot;7、MySQL的语法规范&quot;">​</a></h4><p>​ 1&gt;不区分大小写，建议关键字大写，表名，列名小写</p><p>​ 2&gt;每条命令最好用分号结尾</p><p>​ 3&gt;每条命令根据需要，可以进行缩进 或 换行</p><p>​ 4&gt;注释</p><p>​ 单行注释：#注释文字</p><p>​ 单行注释： -- 注释文字</p><p>​ 多行注释：/* 注释文字 */</p><h3 id="二、dql语言的学习" tabindex="-1">二、DQL语言的学习 <a class="header-anchor" href="#二、dql语言的学习" aria-label="Permalink to &quot;二、DQL语言的学习&quot;">​</a></h3><h4 id="_1、基础查询" tabindex="-1">1、基础查询 <a class="header-anchor" href="#_1、基础查询" aria-label="Permalink to &quot;1、基础查询&quot;">​</a></h4><h5 id="_1-1-语法" tabindex="-1">1.1 语法 <a class="header-anchor" href="#_1-1-语法" aria-label="Permalink to &quot;1.1  语法&quot;">​</a></h5><p>​ select 查询列表</p><p>exist from 表名</p><h5 id="_1-2特点" tabindex="-1">1.2 特点 <a class="header-anchor" href="#_1-2特点" aria-label="Permalink to &quot;1.2	特点&quot;">​</a></h5><p>​ 1&gt; 查询列表可以是字段、常量、表达式、函数、也可以是多个</p><p>​ 2&gt;查询结果是一个虚拟表</p><h5 id="_1-3-示例" tabindex="-1">1.3 示例 <a class="header-anchor" href="#_1-3-示例" aria-label="Permalink to &quot;1.3  示例&quot;">​</a></h5><h6 id="_1-3-1-查询单个字段" tabindex="-1">1.3.1 查询单个字段 <a class="header-anchor" href="#_1-3-1-查询单个字段" aria-label="Permalink to &quot;1.3.1 查询单个字段&quot;">​</a></h6><p>​ select 字段名 from 表名;</p><h6 id="_1-3-2-查询多个字段" tabindex="-1">1.3.2 查询多个字段 <a class="header-anchor" href="#_1-3-2-查询多个字段" aria-label="Permalink to &quot;1.3.2 查询多个字段&quot;">​</a></h6><p>​ select 字段名,字段名 from 表名;</p><h6 id="_1-3-3-查询所有字段" tabindex="-1">1.3.3 查询所有字段 <a class="header-anchor" href="#_1-3-3-查询所有字段" aria-label="Permalink to &quot;1.3.3 查询所有字段&quot;">​</a></h6><p>​ select * from 表名</p><h6 id="_1-3-4-查询常量" tabindex="-1">1.3.4 查询常量 <a class="header-anchor" href="#_1-3-4-查询常量" aria-label="Permalink to &quot;1.3.4 查询常量&quot;">​</a></h6><p>​ select 常量名;</p><h6 id="_1-3-5-查询函数" tabindex="-1">1.3.5 查询函数 <a class="header-anchor" href="#_1-3-5-查询函数" aria-label="Permalink to &quot;1.3.5 查询函数&quot;">​</a></h6><p>​ select 函数名 (实参列表);</p><h6 id="_1-3-6-查询表达式" tabindex="-1">1.3.6 查询表达式 <a class="header-anchor" href="#_1-3-6-查询表达式" aria-label="Permalink to &quot;1.3.6 查询表达式&quot;">​</a></h6><p>​ select 100/1234;</p><h6 id="_1-3-7-起别名" tabindex="-1">1.3.7 起别名 <a class="header-anchor" href="#_1-3-7-起别名" aria-label="Permalink to &quot;1.3.7 起别名&quot;">​</a></h6><p>​ ①as</p><p>​ ②空格</p><h6 id="_1-3-8-去重" tabindex="-1">1.3.8 去重 <a class="header-anchor" href="#_1-3-8-去重" aria-label="Permalink to &quot;1.3.8 去重&quot;">​</a></h6><p>​ select distinct 字段名 from 表名;</p><h6 id="_1-3-9" tabindex="-1">1.3.9 + <a class="header-anchor" href="#_1-3-9" aria-label="Permalink to &quot;1.3.9 +&quot;">​</a></h6><p>​ 作用：做加法运算</p><p>​ select 数值+数值; 直接运算</p><p>​ select 字符+数值;先试图将字符转换成数值,如果转化成功,则继续运算;否则转换成0;再做运算</p><p>​ select null+值;结果都为null</p><h6 id="_1-3-10-【补充】concat函数" tabindex="-1">1.3.10 【补充】concat函数 <a class="header-anchor" href="#_1-3-10-【补充】concat函数" aria-label="Permalink to &quot;1.3.10 【补充】concat函数&quot;">​</a></h6><p>​ 功能：拼接字符</p><p>​ select concat(字符1,字符2,字符3,...);</p><h6 id="_1-3-11-【补充】-ifnull函数" tabindex="-1">1.3.11 【补充】 ifnull函数 <a class="header-anchor" href="#_1-3-11-【补充】-ifnull函数" aria-label="Permalink to &quot;1.3.11 【补充】 ifnull函数&quot;">​</a></h6><p>​ 功能:判断某字段或表达式是否为null,如果为null 返回指定的值,否则返回原本的值</p><p>​ select ifnull(commission_pct,0) from employees;</p><h6 id="_1-3-12-【补充】isnull函数" tabindex="-1">1.3.12 【补充】isnull函数 <a class="header-anchor" href="#_1-3-12-【补充】isnull函数" aria-label="Permalink to &quot;1.3.12 【补充】isnull函数&quot;">​</a></h6><p>​ 功能:判断某字段或表达式是否为null,如果是,则返回1,否则返回0</p><h4 id="_2、条件查询" tabindex="-1">2、条件查询 <a class="header-anchor" href="#_2、条件查询" aria-label="Permalink to &quot;2、条件查询&quot;">​</a></h4><h5 id="_2-1、语法" tabindex="-1">2.1、语法 <a class="header-anchor" href="#_2-1、语法" aria-label="Permalink to &quot;2.1、语法&quot;">​</a></h5><p>​ select 查询列表</p><p>​ from 表名</p><p>​ where 筛选条件</p><h5 id="_2-2、筛选条件的分类" tabindex="-1">2.2、筛选条件的分类 <a class="header-anchor" href="#_2-2、筛选条件的分类" aria-label="Permalink to &quot;2.2、筛选条件的分类&quot;">​</a></h5><h6 id="_2-2-1-简单条件运算符" tabindex="-1">2.2.1 简单条件运算符 <a class="header-anchor" href="#_2-2-1-简单条件运算符" aria-label="Permalink to &quot;2.2.1 简单条件运算符&quot;">​</a></h6><p>​ &gt; &lt; = &lt;&gt; != &gt;= &lt;= &lt;=&gt;安全等级</p><h6 id="_2-2-2-逻辑运算符" tabindex="-1">2.2.2 逻辑运算符 <a class="header-anchor" href="#_2-2-2-逻辑运算符" aria-label="Permalink to &quot;2.2.2 逻辑运算符&quot;">​</a></h6><p>​ &amp;&amp; and</p><p>​ | | or</p><p>​ ！ not</p><h6 id="_2-2-3-模糊查询" tabindex="-1">2.2.3 模糊查询 <a class="header-anchor" href="#_2-2-3-模糊查询" aria-label="Permalink to &quot;2.2.3 模糊查询&quot;">​</a></h6><p>​ like:一般搭配通配符使用,用于判断字符型</p><p>​ 通配符：%任意多个字符,_任意单个字符</p><p>​ between and</p><p>​ in</p><p>​ is null / is not null:用于判断null值</p><p>​</p><p>​ is null PK&lt;=&gt;</p><table><thead><tr><th style="text-align:center;"></th><th style="text-align:center;">普通类型的数值</th><th style="text-align:center;">null值</th><th style="text-align:center;">可读性</th></tr></thead><tbody><tr><td style="text-align:center;">is null</td><td style="text-align:center;">×</td><td style="text-align:center;">√</td><td style="text-align:center;">√</td></tr><tr><td style="text-align:center;">&lt;=&gt;</td><td style="text-align:center;">√</td><td style="text-align:center;">√</td><td style="text-align:center;">×</td></tr></tbody></table><p>​</p><h4 id="_3、排序查询" tabindex="-1">3、排序查询 <a class="header-anchor" href="#_3、排序查询" aria-label="Permalink to &quot;3、排序查询&quot;">​</a></h4><h5 id="_3-1-语法" tabindex="-1">3.1 语法 <a class="header-anchor" href="#_3-1-语法" aria-label="Permalink to &quot;3.1 语法&quot;">​</a></h5><p>​ select 查询列表</p><p>​ from 表</p><p>​ where 筛选条件</p><p>​ order by 排序列表 【asc | desc】</p><h5 id="_3-2特点" tabindex="-1">3.2 特点 <a class="header-anchor" href="#_3-2特点" aria-label="Permalink to &quot;3.2	特点&quot;">​</a></h5><h6 id="_3-2-1-asc-升序-如果不写默认升序" tabindex="-1">3.2.1 asc： 升序，如果不写默认升序 <a class="header-anchor" href="#_3-2-1-asc-升序-如果不写默认升序" aria-label="Permalink to &quot;3.2.1 asc： 升序，如果不写默认升序&quot;">​</a></h6><p>​ desc：降序</p><h6 id="_3-2-2-排序列表-支持-单个字段、多个字段、函数、表达式、别名" tabindex="-1">3.2.2 排序列表 支持 单个字段、多个字段、函数、表达式、别名 <a class="header-anchor" href="#_3-2-2-排序列表-支持-单个字段、多个字段、函数、表达式、别名" aria-label="Permalink to &quot;3.2.2 排序列表 支持 单个字段、多个字段、函数、表达式、别名&quot;">​</a></h6><h6 id="_3-2-3-order-by的位置一般放在查询语句的最后-除limit语句职位" tabindex="-1">3.2.3 order by的位置一般放在查询语句的最后(除limit语句职位) <a class="header-anchor" href="#_3-2-3-order-by的位置一般放在查询语句的最后-除limit语句职位" aria-label="Permalink to &quot;3.2.3 order by的位置一般放在查询语句的最后(除limit语句职位)&quot;">​</a></h6><h4 id="_4、常见函数" tabindex="-1">4、常见函数 <a class="header-anchor" href="#_4、常见函数" aria-label="Permalink to &quot;4、常见函数&quot;">​</a></h4><h5 id="_4-1-概述" tabindex="-1">4.1 概述 <a class="header-anchor" href="#_4-1-概述" aria-label="Permalink to &quot;4.1 概述&quot;">​</a></h5><p>​ 功能：类似于java中的方法</p><p>​ 好处：提高重用性和隐藏实现细节</p><p>​ 调用：select 的函数名(实参列表)</p><h5 id="_4-2-单行函数" tabindex="-1">4.2 单行函数 <a class="header-anchor" href="#_4-2-单行函数" aria-label="Permalink to &quot;4.2 单行函数&quot;">​</a></h5><h6 id="_4-2-1-字符函数" tabindex="-1">4.2.1 字符函数 <a class="header-anchor" href="#_4-2-1-字符函数" aria-label="Permalink to &quot;4.2.1 字符函数&quot;">​</a></h6><p>​ concat:连接</p><p>​ substr:劫取子串</p><p>​ upper:变大写</p><p>​ lower:变小写</p><p>​ replace:替换</p><p>​ length:获取字节长度</p><p>​ trim:在前后空格</p><p>​ lpad:左填充</p><p>​ rpad:右填充</p><p>​ innstr:获取字串第一次出现的索引</p><h5 id="_4-3-数学函数" tabindex="-1">4.3 数学函数 <a class="header-anchor" href="#_4-3-数学函数" aria-label="Permalink to &quot;4.3 数学函数&quot;">​</a></h5><p>​ ceil:向上取整</p><p>​ round:四舍五入</p><p>​ mod:取模</p><p>​ floor:向下取整</p><p>​ truncate:截断</p><p>​ rand:获取随机数,返回0-1之间的小数</p><p>​ 4.4 日期函数</p><p>​ now:返回当前日期+时间</p><p>​ year:返回年</p><p>​ month:返回月</p><p>​ day:返回日</p><p>​ data_format:将日期转换成字符</p><p>​ curdate:返回当前日期</p><p>​ str_to_date:将字符转换成日期</p><p>​ curtine:返回当前时间</p><p>​ hour:小时</p><p>​ minute:分钟</p><p>​ second:秒</p><p>​ datediff:返回两个日期相差的天数</p><p>​ monthname:以英文形式返回月</p><h5 id="_4-4-其他函数" tabindex="-1">4.4 其他函数 <a class="header-anchor" href="#_4-4-其他函数" aria-label="Permalink to &quot;4.4  其他函数&quot;">​</a></h5><p>​ version 当前数据库服务器的版本</p><p>​ database:当前打开的数据库</p><p>​ user 当前用户</p><p>​ password(&quot;字符&quot;):返回该字符的密码形式</p><p>​ md5(&quot;字符&quot;):返回该字符的md5加密形式</p><h5 id="_4-5-流程控制函数" tabindex="-1">4.5 流程控制函数 <a class="header-anchor" href="#_4-5-流程控制函数" aria-label="Permalink to &quot;4.5  流程控制函数&quot;">​</a></h5><p>​ 1&gt; if(条件表达式,表达式1,表达式2):如果条件表达式成立,返回表达式1,否则返回表达式2</p><p>​ 2&gt; case情况1:</p><p>​ case 变量或表达式或字段</p><p>​ when 常量1 then 值1</p><p>​ when 常量2 then 值2</p><p>​ ...</p><p>​ else</p><p>​ end</p><h5 id="_4-6-分组函数" tabindex="-1">4.6 分组函数 <a class="header-anchor" href="#_4-6-分组函数" aria-label="Permalink to &quot;4.6   分组函数&quot;">​</a></h5><h6 id="_4-6-1-分类" tabindex="-1">4.6.1 分类： <a class="header-anchor" href="#_4-6-1-分类" aria-label="Permalink to &quot;4.6.1 分类：&quot;">​</a></h6><p>​ max 最大值</p><p>​ min 最小值</p><p>​ sum 和</p><p>​ avg 平均值</p><p>​ count 计算个数</p><h6 id="_4-6-2-特点" tabindex="-1">4.6.2 特点: <a class="header-anchor" href="#_4-6-2-特点" aria-label="Permalink to &quot;4.6.2 特点:&quot;">​</a></h6><p>​ 1&gt; 语法</p><p>​ select max (字段) from 表名:</p><p>​ 2&gt;支持的类型</p><p>​ sum和avg一般处理数值型</p><p>​ max、min、count可以处理任何数据类型</p><p>​ 3&gt;以上分组函数都忽略null</p><p>​ 4&gt;都可以搭配distinct使用，实现去重的统计</p><p>​ select max(distinct 字段) from 表;</p><p>​ 5&gt;count函数</p><p>​ count（字段）:统计该字段非空值的个数</p><p>​ count(*)：统计结果集的行数</p><p>​ 案例:查询每个部门的员工个数</p><p>​</p><p>​ 效率上：</p><p>​ MyLSM存储引擎，count(*)最高</p><p>​ InnoDB存储引擎,count(*)和count(1)效率大于&gt;count(字段)</p><p>​ 6&gt;和分组函数一同查询的字段,要求是group by后出现的字段</p><h4 id="_5、分组查询" tabindex="-1">5、分组查询 <a class="header-anchor" href="#_5、分组查询" aria-label="Permalink to &quot;5、分组查询&quot;">​</a></h4><h5 id="_5-1语法" tabindex="-1">5.1 语法 <a class="header-anchor" href="#_5-1语法" aria-label="Permalink to &quot;5.1	语法&quot;">​</a></h5><p>​ select 分组函数,分组后的字段</p><p>​ from 表</p><p>​ 【where 筛选条件】</p><p>​ group by 分组的字段</p><p>​ 【having 分组后的筛选】</p><p>​ 【order by 排序列表】</p><h5 id="_5-2特点" tabindex="-1">5.2 特点 <a class="header-anchor" href="#_5-2特点" aria-label="Permalink to &quot;5.2	特点&quot;">​</a></h5><p>​</p><table><thead><tr><th></th><th>使用关键字</th><th>筛选的表</th><th>位置</th></tr></thead><tbody><tr><td>分组前筛选</td><td>where</td><td>原始表</td><td>group by前面</td></tr><tr><td>分组后筛选</td><td>having</td><td>分组后的结果</td><td>group by后面</td></tr></tbody></table><p>​</p><h4 id="_6、连接查询" tabindex="-1">6、连接查询 <a class="header-anchor" href="#_6、连接查询" aria-label="Permalink to &quot;6、连接查询&quot;">​</a></h4><h5 id="_6-1含义" tabindex="-1">6.1 含义 <a class="header-anchor" href="#_6-1含义" aria-label="Permalink to &quot;6.1	含义&quot;">​</a></h5><p>​ 当查询中涉及到了多个表的字段,需要使用多表连接</p><p>​ select 字段1,字段2</p><p>​ from 表1,表2,...</p><p>​ 笛卡尔乘积:当查询多个表时，没有添加有效的连接条件,导致多个表所有行实现完全连接</p><p>​ 如何解决:添加有效的<em><strong>连接条件</strong></em></p><h5 id="_6-2分类" tabindex="-1">6.2 分类 <a class="header-anchor" href="#_6-2分类" aria-label="Permalink to &quot;6.2	分类&quot;">​</a></h5><p>​ 按年代分类:</p><p>​ sq192:</p><p>​ 等值</p><p>​ 非等值</p><p>​ 自连接</p><p>​ 也支持一部分外连接(用于oracle、sqlserver、mysql不支持)</p><p>​ sq199【推荐使用】：</p><p>​ 内连接</p><p>​ 等值</p><p>​ 非等值</p><p>​ 自连接</p><p>​ 外连接</p><p>​ 左外</p><p>​ 右外</p><p>​ 全外(Mysql不支持)</p><p>​ 交叉连接</p><h5 id="_6-3sql92语法" tabindex="-1">6.3 SQL92语法 <a class="header-anchor" href="#_6-3sql92语法" aria-label="Permalink to &quot;6.3	SQL92语法&quot;">​</a></h5><h6 id="_6-3-1-等值连接" tabindex="-1">6.3.1 等值连接 <a class="header-anchor" href="#_6-3-1-等值连接" aria-label="Permalink to &quot;6.3.1 等值连接&quot;">​</a></h6><p>​ 语法:</p><p>​ select 查询列表</p><p>​ from 表1 别名 ,表2 别名</p><p>​ where 表1, key=表2,key</p><p>​ 【and 筛选条件】</p><p>​ 【group by 分组字段】</p><p>​ 【having 分组后的筛选】</p><p>​ 【order by 排序字段】</p><p>​ 特点:</p><p>​ 1&gt;一般为表起别名</p><p>​ 2&gt;多表的顺序可以调换</p><p>​ 3&gt;n表连接至少需要n-1个连接条件</p><p>​ 4&gt;等值连接的结果是多表的交集部分</p><h6 id="_6-3-2-非等值连接" tabindex="-1">6.3.2 非等值连接 <a class="header-anchor" href="#_6-3-2-非等值连接" aria-label="Permalink to &quot;6.3.2 非等值连接&quot;">​</a></h6><p>​ 语法:</p><p>​ select 查询列表</p><p>​ from 表1 别名 ,表2 别名</p><p>​ where 非等值连接条件</p><p>​ 【and 筛选条件】</p><p>​ 【group by 分组字段】</p><p>​ 【having 分组后的筛选】</p><p>​ 【order by 排序字段】</p><h6 id="_6-3-3自连接" tabindex="-1">6.3.3 自连接 <a class="header-anchor" href="#_6-3-3自连接" aria-label="Permalink to &quot;6.3.3	自连接&quot;">​</a></h6><p>​ 语法:</p><p>​ select 查询列表</p><p>​ from 表 别名 ,表 别名</p><p>​ where 等值的连接条件</p><p>​ 【and 筛选条件】</p><p>​ 【group by 分组字段】</p><p>​ 【having 分组后的筛选】</p><p>​ 【order by 排序字段】</p><h5 id="_6-4sql99语法" tabindex="-1">6.4 SQL99语法 <a class="header-anchor" href="#_6-4sql99语法" aria-label="Permalink to &quot;6.4	SQL99语法&quot;">​</a></h5><h6 id="_6-4-1-内连接" tabindex="-1">6.4.1 内连接 <a class="header-anchor" href="#_6-4-1-内连接" aria-label="Permalink to &quot;6.4.1 内连接&quot;">​</a></h6><p>​ <em>语法</em>：</p><p>​ select 查询列表</p><p>​ from 表1 别名</p><p>​ 【inner】 join 表2 别名 on 连接条件</p><p>​ where 筛选条件</p><p>​ group by 分组列表</p><p>​ having 分组后的筛选</p><p>​ order by 排序列表</p><p>​ limit 子句：</p><p>​ <em>特点：</em></p><p>​ 1&gt;表的顺序可以调换</p><p>​ 2&gt;内连接的结果=多表的交集</p><p>​ 3&gt;n表连接至少需要n-1个连接条件</p><p>​ <em>分类：</em></p><p>​ 等值连接 非等值连接 自连接</p><h6 id="_6-4-2-外连接" tabindex="-1">6.4.2 外连接 <a class="header-anchor" href="#_6-4-2-外连接" aria-label="Permalink to &quot;6.4.2 外连接&quot;">​</a></h6><p>​ <em>语法：</em></p><p>​ select 查询列表</p><p>​ from 表1 别名</p><p>​ left|right|full|【inner】 join 表二 别名 on 连接条件</p><p>​ where 筛选条件</p><p>​ group by 分组列表</p><p>​ having 分组后的筛选</p><p>​ order by 排序列表</p><p>​ limit 子句：</p><p>​ <em>特点：</em></p><p>​ 1&gt;查询的结果=主表中所有的行,如果从表和它匹配的将显示行，如果从表没有匹配的则显示null</p><p>​ 2&gt;left join 左边的就是主表,right join 右边的就是主表</p><p>​ full join 两边都是主表</p><p>​ 3&gt;一般用于查询除了交集部分的剩余的不匹配的行</p><h6 id="_6-4-3交叉连接" tabindex="-1">6.4.3交叉连接 <a class="header-anchor" href="#_6-4-3交叉连接" aria-label="Permalink to &quot;6.4.3交叉连接&quot;">​</a></h6><p>​ <em>语法：</em></p><p>​ select 查询列表</p><p>​ from 表1 别名</p><p>​ cross join 表2，别名;</p><p>​ <em>特点：</em></p><p>​ 类似于笛卡尔乘积</p><h4 id="_7、子查询" tabindex="-1">7、子查询 <a class="header-anchor" href="#_7、子查询" aria-label="Permalink to &quot;7、子查询&quot;">​</a></h4><h5 id="_7-1-含义" tabindex="-1">7.1 含义 <a class="header-anchor" href="#_7-1-含义" aria-label="Permalink to &quot;7.1 含义&quot;">​</a></h5><p>​ 嵌套在其他语句内部的select语句称为子查询或内查询,</p><p>​ 外面的语句可以是insert、update、delete、<strong>select</strong>等,一般select作为外面的语句较多</p><p>​ 外面如果为select语句，则此语句称为外查询或主查询</p><h5 id="_7-2-分类" tabindex="-1">7.2 分类 <a class="header-anchor" href="#_7-2-分类" aria-label="Permalink to &quot;7.2 分类&quot;">​</a></h5><h6 id="_7-2-1-按出现位置" tabindex="-1">7.2.1 按出现位置 <a class="header-anchor" href="#_7-2-1-按出现位置" aria-label="Permalink to &quot;7.2.1 按出现位置&quot;">​</a></h6><p>​ select 后面：</p><p>​ 仅仅支持标量子查询</p><p>​ from 后面</p><p>​ 表子查询</p><p>​ <strong>where或having后面</strong></p><p>​ <strong>标量子查询</strong></p><p>​ <strong>列子查询</strong></p><p>​ 行子查询</p><p>​ exists 后面</p><p>​ 标量子查询</p><p>​ 列子查询</p><p>​ 行子查询</p><p>​ 表子查询</p><h6 id="_7-2-2-按结果集的行列" tabindex="-1">7.2.2 按结果集的行列 <a class="header-anchor" href="#_7-2-2-按结果集的行列" aria-label="Permalink to &quot;7.2.2 按结果集的行列&quot;">​</a></h6><p>​ <strong>标量子查询(单行子查询):结果为一行一列</strong></p><p>​ <strong>列子查询(多行子查询):结果为多行一列</strong>*</p><p>​ 行子查询:结果集为多行多列</p><p>​ 表子查询:结果集为多行多列</p><h6 id="_7-2-3-示例" tabindex="-1">7.2.3 示例 <a class="header-anchor" href="#_7-2-3-示例" aria-label="Permalink to &quot;7.2.3 示例&quot;">​</a></h6><p>​ where或having后面</p><p>​ 1、标量子查询</p><p>​ 案例：查询最低工资的员工姓名和工资</p><p>​ 1&gt;最低工资</p><p>​ select min(salary) from employees</p><p>​ 2&gt;查询员工的姓名和工资,要求工资=1&gt;</p><p>​ select last_name,salary</p><p>​ from employees</p><p>​ where salary =(</p><p>​ select min(salary) from employees</p><p>​ );</p><p>​ 2、列子查询</p><p>​ 案例：查询所有是领导的员工姓名</p><p>​ 1&gt;查询所有员工的 manager_id</p><p>​</p><div class="language-mysql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mysql</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>select manager_id</span></span>
<span class="line"><span></span></span>
<span class="line"><span>​	from employees</span></span></code></pre></div><p>​ 2&gt;查询姓名给,employee_id属于1&gt;列表中的一个</p><p>​</p><div class="language-mysql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mysql</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>select last_name</span></span>
<span class="line"><span></span></span>
<span class="line"><span>​ from employees</span></span>
<span class="line"><span></span></span>
<span class="line"><span>​ where employee_id in(</span></span>
<span class="line"><span>												select manager_id</span></span>
<span class="line"><span></span></span>
<span class="line"><span>​ 	from employees</span></span>
<span class="line"><span></span></span>
<span class="line"><span>);</span></span></code></pre></div><h4 id="_8、分页查询" tabindex="-1">8、分页查询 <a class="header-anchor" href="#_8、分页查询" aria-label="Permalink to &quot;8、分页查询&quot;">​</a></h4><h5 id="_8-1-应用场景" tabindex="-1">8.1 应用场景 <a class="header-anchor" href="#_8-1-应用场景" aria-label="Permalink to &quot;8.1 应用场景&quot;">​</a></h5><p>​ 当要查询的条目数太多,一页显示不全</p><h5 id="_8-2-语法" tabindex="-1">8.2 语法 <a class="header-anchor" href="#_8-2-语法" aria-label="Permalink to &quot;8.2 语法&quot;">​</a></h5><p>​ select 查询列表</p><p>​ from 表</p><p>​ limit 【offset,】size;</p><p>​ 注意：</p><p>​ offset代表的是起始的条目索引,默认从0卡死</p><p>​ size代表的是显示的条目数</p><p>​</p><p>​ 公式:</p><p>​ 假如要显示的页数为page,每一页条目数为size</p><p>​ select 查询列表</p><p>​ from 表</p><p>​ *<em>limit (page-1)<em>size,size;</em></em></p><p>​</p><h3 id="三、dml语言" tabindex="-1">三、DML语言 <a class="header-anchor" href="#三、dml语言" aria-label="Permalink to &quot;三、DML语言&quot;">​</a></h3><h3 id="四、ddl语言" tabindex="-1">四、DDL语言 <a class="header-anchor" href="#四、ddl语言" aria-label="Permalink to &quot;四、DDL语言&quot;">​</a></h3><h5 id="一、常见的约束" tabindex="-1">一、常见的约束 <a class="header-anchor" href="#一、常见的约束" aria-label="Permalink to &quot;一、常见的约束&quot;">​</a></h5><p>​ not null：非空，该字段的值必须填</p><p>​ UNIQUE:唯一，该字段的值不可重复</p><p>​ DEFAULT：默认，该字段的值可以不用手动插入，有默认值</p><p>​ CHECK：检查，mysql不支持</p><p>​ PRIMARY KEY：主键，该字段的值不可重复并且非空 unique+not null</p><p>​ FPREIGN KEY:外键，该字段的值引用了另外的表的字段</p><h6 id="主键和唯一" tabindex="-1">主键和唯一 <a class="header-anchor" href="#主键和唯一" aria-label="Permalink to &quot;主键和唯一&quot;">​</a></h6><p>​ 1.区别：</p><p>​ ①.一个表至多有一个主键，但可以有多个唯一</p><p>​ ②.主键不允许为空，唯一可以为空</p><p>​ 2.相同点</p><p>​ 都具有唯一性</p><p>​ 都支持组合键，但不推荐</p><h6 id="外键" tabindex="-1">外键： <a class="header-anchor" href="#外键" aria-label="Permalink to &quot;外键：&quot;">​</a></h6><p>​ 1.用于限制两个表的关系，从表的字段值引用了主表的某字段值</p><p>​ 2.外键列和主表的被引用列要求类型一致，意义一样，名称无要求</p><p>​ 3.主表的被引用列要求是一个key(一般就是主键)</p><p>​ 4.插入数据，先插入主表</p><p>​ 删除数据，先删除从表</p><h3 id="五、tcl语言" tabindex="-1">五、TCL语言 <a class="header-anchor" href="#五、tcl语言" aria-label="Permalink to &quot;五、TCL语言&quot;">​</a></h3><h4 id="一、含义" tabindex="-1">一、含义 <a class="header-anchor" href="#一、含义" aria-label="Permalink to &quot;一、含义&quot;">​</a></h4><p>事务：一条或多条sql语句组成的一个执行单位,一组sql语句要么都执行要么都不执行</p><h4 id="二、特点-acid" tabindex="-1">二、特点(ACID) <a class="header-anchor" href="#二、特点-acid" aria-label="Permalink to &quot;二、特点(ACID)&quot;">​</a></h4><p>A 原子性：一个事务是不可再分割的整体,要么都执行要么都不执行</p><p>C 一致性：一个事务是不可再分割的整体,要么都执行要么都不执行</p><p>I 隔离性：一个事务不受其他事务的干扰,多个事务互相隔离的</p><p>D 持久性：一个事务一旦提交了,则永久的持久化的本地</p><h4 id="三、事物的使用步骤※" tabindex="-1">三、事物的使用步骤※ <a class="header-anchor" href="#三、事物的使用步骤※" aria-label="Permalink to &quot;三、事物的使用步骤※&quot;">​</a></h4><p>了解：</p><p>隐式(自动)事务:没有明显的开启和结束,本身就是一条事务可以自动提交,比如insert,update,delete</p><p>显式事务：具有明显的开启和结束</p><p>使用显式事务：</p><p>①开启事务</p><p>set autocommit=0;</p><p>start transaction;#可以省略</p><p>②编写一组逻辑sql语句</p><p>注意：sql语句支持的是insert,update,delete</p><p>设置回滚点：</p><p>savepoint 回滚点名；</p><p>③结束事务</p><p>提交：commit</p><p>回滚：rollback</p><p>回滚到指定的地方：rollback to 回滚点名;</p><h4 id="四、并发事务" tabindex="-1">四、并发事务 <a class="header-anchor" href="#四、并发事务" aria-label="Permalink to &quot;四、并发事务&quot;">​</a></h4><p>1、事务的并发问题是如何发生的？</p><pre><code>	多个事务 同时 操作 同一个数据建库的相同数据时
</code></pre><p>2、并发问题都有哪些？</p><p>​ 脏读：一个事务读取了其他食物还没有提交的数据</p><p>​ 不可重复读：一个事务多次读取,结果不一样</p><p>​ 幻读：一个事务读取了其他食物还没有提交的数据，只是读到的是 其他事务“插入”的数据</p><p>3、如何解决并发问题</p><p>​ 通过设置隔离级别来解决并发问题</p><p>4、隔离级别</p><p>​ 脏读 不可重复读 幻读</p><p>​ read uncommitted:读未提交 × × ×</p><p>​ read committed:读已提交 √ × ×</p><p>​ repeatable read:可重复读 √ √ ×</p><p>​ serializable:串行化 √ √ √</p><h3 id="六、视图" tabindex="-1">六、视图 <a class="header-anchor" href="#六、视图" aria-label="Permalink to &quot;六、视图&quot;">​</a></h3><h4 id="一、含义-1" tabindex="-1">一、含义 <a class="header-anchor" href="#一、含义-1" aria-label="Permalink to &quot;一、含义&quot;">​</a></h4><p>​ mysql5.1版本出现的新特性，本身是一个虚拟表，他的数据来自于表，通过执行时动态生成。</p><p>​ 好处：</p><p>​ 1、简化sql语句</p><p>​ 2、提高了sql的重用性</p><p>​ 3、保护基表的数据，提高了安全性</p><h4 id="二、创建" tabindex="-1">二、创建 <a class="header-anchor" href="#二、创建" aria-label="Permalink to &quot;二、创建&quot;">​</a></h4><p>​ creat view 视图名</p><p>​ as</p><p>​ 查询语句;</p><h4 id="三、修改" tabindex="-1">三、修改 <a class="header-anchor" href="#三、修改" aria-label="Permalink to &quot;三、修改&quot;">​</a></h4><h5 id="方式一" tabindex="-1">方式一： <a class="header-anchor" href="#方式一" aria-label="Permalink to &quot;方式一：&quot;">​</a></h5><p>​ creat or replace view 视图名</p><p>​ as</p><p>​ 查询语句;</p><h5 id="方式二" tabindex="-1">方式二： <a class="header-anchor" href="#方式二" aria-label="Permalink to &quot;方式二：&quot;">​</a></h5><p>​ alter view 视图名</p><p>​ as</p><p>​ 查询语句</p><h4 id="四、删除" tabindex="-1">四、删除 <a class="header-anchor" href="#四、删除" aria-label="Permalink to &quot;四、删除&quot;">​</a></h4><p>​ drop view 试图1,试图2,......;</p><h4 id="五、查看" tabindex="-1">五、查看 <a class="header-anchor" href="#五、查看" aria-label="Permalink to &quot;五、查看&quot;">​</a></h4><p>​ desc 视图名;</p><p>​ show creat view 视图名;</p><h4 id="六、使用" tabindex="-1">六、使用 <a class="header-anchor" href="#六、使用" aria-label="Permalink to &quot;六、使用&quot;">​</a></h4><h5 id="_1-插入" tabindex="-1">1.插入 <a class="header-anchor" href="#_1-插入" aria-label="Permalink to &quot;1.插入&quot;">​</a></h5><p>​ insert</p><h5 id="_2-修改" tabindex="-1">2.修改 <a class="header-anchor" href="#_2-修改" aria-label="Permalink to &quot;2.修改&quot;">​</a></h5><p>​ update</p><h5 id="_3-删除" tabindex="-1">3.删除 <a class="header-anchor" href="#_3-删除" aria-label="Permalink to &quot;3.删除&quot;">​</a></h5><p>​ delete</p><h5 id="_4-查看" tabindex="-1">4.查看 <a class="header-anchor" href="#_4-查看" aria-label="Permalink to &quot;4.查看&quot;">​</a></h5><p>​ select</p><p>​ 注意：试图一般用于查询的,而不是更新的,所以具备以下特点的试图都不允许更新</p><p>​ ①包含分组函数、group by,distinct,having,union,</p><p>​ ②join</p><p>​ ③常量视图</p><p>​ ④where后的子查询用到了from中的表</p><p>​ ⑤用到了不可更新的视图</p><h4 id="七、视图和表的对比" tabindex="-1">七、视图和表的对比 <a class="header-anchor" href="#七、视图和表的对比" aria-label="Permalink to &quot;七、视图和表的对比&quot;">​</a></h4><pre><code>		关键字			是否占用内存									使用
</code></pre><p>视图 view 占用较小，只保存sql逻辑 一般用于查询</p><p>表 table 保存实际的数据 增删改查</p><h3 id="七、变量" tabindex="-1">七、变量 <a class="header-anchor" href="#七、变量" aria-label="Permalink to &quot;七、变量&quot;">​</a></h3><h4 id="分类" tabindex="-1">分类： <a class="header-anchor" href="#分类" aria-label="Permalink to &quot;分类：&quot;">​</a></h4><h5 id="一、系统变量" tabindex="-1">一、系统变量 <a class="header-anchor" href="#一、系统变量" aria-label="Permalink to &quot;一、系统变量&quot;">​</a></h5><p>​ 说明：变量是由系统提供的，不用自定义</p><p>​ 语法：</p><p>​ ①查看系统变量</p><p>​ show【global|session】variables like’’;如果没有显式声明global还是session，则默认是session</p><p>​ ②查看指定的系统变量的值</p><p>​ select @@【global|session】,变量名;如果没有显示声明global还是session,则默认是session</p><p>​ ③为系统变量赋值</p><p>​ 方式一：</p><p>​ set【global|session】变量名=值;如果没有显式声明global还是session，则默认是session</p><p>​ 方式二：</p><p>​ set @@global，变量名=值；</p><p>​ set @@变量名=值;</p><h6 id="_1、全局变量" tabindex="-1">1、全局变量 <a class="header-anchor" href="#_1、全局变量" aria-label="Permalink to &quot;1、全局变量&quot;">​</a></h6><p>​ 服务器层面上的，必须拥有super权限才能为系统变量赋值，作用域为整个服务器，也就是针对于所有连接(会话)有效</p><h6 id="_2、会话变量" tabindex="-1">2、会话变量 <a class="header-anchor" href="#_2、会话变量" aria-label="Permalink to &quot;2、会话变量&quot;">​</a></h6><p>​ 服务器为每一个连接的客户端都提供了系统变量，作用域为当前的连接(会话)</p><h5 id="二、自定义变量" tabindex="-1">二、自定义变量 <a class="header-anchor" href="#二、自定义变量" aria-label="Permalink to &quot;二、自定义变量&quot;">​</a></h5><p>​ 说明：</p><h6 id="_1、用户变量" tabindex="-1">1、用户变量 <a class="header-anchor" href="#_1、用户变量" aria-label="Permalink to &quot;1、用户变量&quot;">​</a></h6><p>​ 作用域：针对于当前连接(会话)生效</p><p>​ 位置：begin end里面，也可以放在外面</p><p>​ 使用：</p><p>​ ①声明并赋值：</p><p>​ 方式一：</p><p>​ set @变量名=值；或</p><p>​ set @变量名：=值；或</p><p>​ set @变量名：=值；</p><p>​ 方式二：</p><p>​ selecet xx into @变量名 from 表;</p><p>​</p><p>​ ②使用</p><p>​ select @变量名;</p><h6 id="_2、局部变量" tabindex="-1">2、局部变量 <a class="header-anchor" href="#_2、局部变量" aria-label="Permalink to &quot;2、局部变量&quot;">​</a></h6><p>​ 作用域：仅仅在定义它的begin end中有效</p><p>​ 位置：只能放在begin end中，而且只能放在第一句</p><p>​ 使用：</p><p>​ ①声明</p><p>​ declare 变量名 类型 【default 值】;</p><p>​ ②赋值或更新</p><p>​ 方式一：</p><p>​ set @变量名=值；或</p><p>​ set @变量名：=值；或</p><p>​ set @变量名：=值；</p><p>​ 方式二：</p><p>​ selecet xx into @变量名 from 表;</p><p>​</p><p>​ ③使用</p><p>​ select 变量名;</p><h3 id="八、存储过程和函数" tabindex="-1">八、存储过程和函数 <a class="header-anchor" href="#八、存储过程和函数" aria-label="Permalink to &quot;八、存储过程和函数&quot;">​</a></h3><p>​ 说明：都类似于java中的方法，将一组完成特定功能的逻辑语句包装起来，对外暴露名字</p><p>​ 好处：</p><p>​ 1、提高重用性</p><p>​ 2、sql语句简单</p><p>​ 3、减少了和数据库服务器连接的次数，提高了效率</p><h4 id="_8-1存储过程" tabindex="-1">8.1存储过程 <a class="header-anchor" href="#_8-1存储过程" aria-label="Permalink to &quot;8.1存储过程&quot;">​</a></h4><h5 id="一、创建※" tabindex="-1">一、创建※ <a class="header-anchor" href="#一、创建※" aria-label="Permalink to &quot;一、创建※&quot;">​</a></h5><p>​ creat procedure 存储过程名(参数模式 参数名 参数类型)</p><p>​ begin</p><p>​ 存储过程体</p><p>​ end</p><p>​ 注意：</p><p>​ 1.参数模式：in、out、inout，其中in可以省略</p><p>​ 2.存储过程体的每一条sql语句都需要分号结尾</p><h5 id="二、调用" tabindex="-1">二、调用 <a class="header-anchor" href="#二、调用" aria-label="Permalink to &quot;二、调用&quot;">​</a></h5><p>​ call 存储过程名(实参列表)</p><p>​ 举例：</p><p>​ 调用in模式的参数：call sql(‘值’);</p><p>​ 调用out模式的参数：set @name;call sql(@name);select @name;</p><p>​ 调用inout模式的参数：set @name=值;call sql(@name);select @name;</p><h5 id="三、查看" tabindex="-1">三、查看 <a class="header-anchor" href="#三、查看" aria-label="Permalink to &quot;三、查看&quot;">​</a></h5><p>​ show creat procedure 存储过程名;</p><h5 id="四、删除-1" tabindex="-1">四、删除 <a class="header-anchor" href="#四、删除-1" aria-label="Permalink to &quot;四、删除&quot;">​</a></h5><p>​ drop procedure 存储过程名;</p><h4 id="_8-2函数" tabindex="-1">8.2函数 <a class="header-anchor" href="#_8-2函数" aria-label="Permalink to &quot;8.2函数&quot;">​</a></h4><h5 id="一、创建" tabindex="-1">一、创建 <a class="header-anchor" href="#一、创建" aria-label="Permalink to &quot;一、创建&quot;">​</a></h5><p>​ creat function 函数名(参数名 参数类型) return 返回类型</p><p>​ begin</p><p>​ 函数体</p><p>​ end</p><p>​ 注意：函数体中肯定需要有return语句</p><h5 id="二、调用-1" tabindex="-1">二、调用 <a class="header-anchor" href="#二、调用-1" aria-label="Permalink to &quot;二、调用&quot;">​</a></h5><p>​ select 函数名(实参列表);</p><h5 id="三、查看-1" tabindex="-1">三、查看 <a class="header-anchor" href="#三、查看-1" aria-label="Permalink to &quot;三、查看&quot;">​</a></h5><p>​ show creat function 函数名;</p><h5 id="四、删除-2" tabindex="-1">四、删除 <a class="header-anchor" href="#四、删除-2" aria-label="Permalink to &quot;四、删除&quot;">​</a></h5><p>​ drop function 函数名;</p><p>​</p><h3 id="九、流程控制结构" tabindex="-1">九、流程控制结构 <a class="header-anchor" href="#九、流程控制结构" aria-label="Permalink to &quot;九、流程控制结构&quot;">​</a></h3><p>说明：</p><p>​ 顺序结构：程序从上往下依次执行</p><p>​ 分支结构：程序按条件进行选择执行，从两条或多条路径中选择一条执行</p><p>​ 循环结构：程序满足一定条件下，重复执行一组。</p><h4 id="_9-1分支结构" tabindex="-1">9.1分支结构 <a class="header-anchor" href="#_9-1分支结构" aria-label="Permalink to &quot;9.1分支结构&quot;">​</a></h4><p>​ 特点：</p><p>​ 1.if函数</p><p>​ 功能：实现简单双分支</p><p>​ 语法：</p><p>​ if(条件，值1，值2)</p><p>​ 位置：</p><p>​ 可以作为表达式放在任何位置</p><p>​ 2.case结构</p><p>​ 功能：实现多分支</p><p>​ 语法：</p><p>​ case 表达式或字段</p><p>​ when 值1 then 语句1;</p><p>​ when 值2 then 语句2;</p><p>​ ...</p><p>​ else 语句n;</p><p>​ end[case];</p><p>​ 位置：</p><p>​ 可以放在任何位置,如果放在begin end外面，作为表达式结合着其他语句使用</p><p>​ 如果放在begin end里面,一般作为独立的语句使用</p><p>​ 3.if结构</p><p>​ 功能：实现多分支</p><p>​ 语法：</p><p>​ if 条件1 then语句1;</p><p>​ elseif 条件2 then 语句2;</p><p>​ ...</p><p>​ else 语句n;</p><p>​ end if;</p><p>​ 位置：</p><p>​ 只能放在begin end中</p><h4 id="_9-2循环结构" tabindex="-1">9.2循环结构 <a class="header-anchor" href="#_9-2循环结构" aria-label="Permalink to &quot;9.2循环结构&quot;">​</a></h4><p>​ 位置：只能放在begin end中</p><p>​ 特点：都能实现循环结构</p><p>​ 对比：</p><p>​ ①这三种循环都可以省略名称，但如果循环中添加了循环控制语句(leave或iterate)则必须添加名称</p><p>​ ②</p><p>​ loop 一般用于简单的死循环</p><p>​ while 先判断后执行</p><p>​ repeat 先执行后判断,无条件至少执行一次。</p><p>​ 1.while</p><p>​ 语法：</p><p>​ 【名称：】while 循环条件 do</p><p>​ 循环体</p><p>​ end while【名称】;</p><p>​ 2.loop</p><p>​ 语法：</p><p>​ 【名称：】loop</p><p>​ 循环体</p><p>​ end loop【名称】;</p><p>​ 3.repeat</p><p>​ 语法：</p><p>​ 【名称：】repeat</p><p>​ 循环体</p><h4 id="_9-3循环控制语句" tabindex="-1">9.3循环控制语句 <a class="header-anchor" href="#_9-3循环控制语句" aria-label="Permalink to &quot;9.3循环控制语句&quot;">​</a></h4><p>​ leave：类似于break,用于跳出所在的循环</p><p>​ iterate:类似于continue,用于结束本次循环,继续下一次</p><hr><h1 id="mysql-索引" tabindex="-1">MySQL 索引 <a class="header-anchor" href="#mysql-索引" aria-label="Permalink to &quot;MySQL 索引&quot;">​</a></h1><hr><h3 id="一、-简述索引" tabindex="-1">一、 简述索引： <a class="header-anchor" href="#一、-简述索引" aria-label="Permalink to &quot;一、 简述索引：&quot;">​</a></h3><hr><hr><h1 id="mysql、redis-面试题" tabindex="-1">Mysql、Redis 面试题 <a class="header-anchor" href="#mysql、redis-面试题" aria-label="Permalink to &quot;Mysql、Redis 面试题&quot;">​</a></h1><hr><h3 id="一、mysql-和-redis-如何保存数据一致性" tabindex="-1">一、Mysql 和 Redis 如何保存数据一致性： <a class="header-anchor" href="#一、mysql-和-redis-如何保存数据一致性" aria-label="Permalink to &quot;一、Mysql 和 Redis 如何保存数据一致性：&quot;">​</a></h3><p>​ 通俗易懂常用方法（两种）：</p><h4 id="_1、-先更新数据库再更新缓存" tabindex="-1">1、 先更新数据库再更新缓存 <a class="header-anchor" href="#_1、-先更新数据库再更新缓存" aria-label="Permalink to &quot;1、 先更新数据库再更新缓存&quot;">​</a></h4><p>​ 如果采用这种方法，如果缓存更新失败，就会出现数据库和Redis中数据不一致的问题</p><h4 id="_2、先删除缓存再更新数据库" tabindex="-1">2、先删除缓存再更新数据库 <a class="header-anchor" href="#_2、先删除缓存再更新数据库" aria-label="Permalink to &quot;2、先删除缓存再更新数据库&quot;">​</a></h4><pre><code>			 如果采用这种方法，理想状况下，应用下次访问Redis时候，发现里面是空的，就从数据库中加载并保存到Redis中
</code></pre><p>​ </p><h4 id="_3、-所以采用最终一致性方案" tabindex="-1">3、 所以采用最终一致性方案： <a class="header-anchor" href="#_3、-所以采用最终一致性方案" aria-label="Permalink to &quot;3、 所以采用最终一致性方案：&quot;">​</a></h4><p>​ 如： 基于 RocketMQ 的可靠性消息通信（异步重发）来实现最终一致性</p><p>​ 或： 直接通过 Canal 组件，监控 Mysql 中的 binlog 的日志，把更新后的数据同步到 Redis</p><h4 id="_4、但-如果业务不能接受短期的数据不一致性则" tabindex="-1">4、但， 如果业务不能接受短期的数据不一致性则： <a class="header-anchor" href="#_4、但-如果业务不能接受短期的数据不一致性则" aria-label="Permalink to &quot;4、但， 如果业务不能接受短期的数据不一致性则：&quot;">​</a></h4><p>​ 我们可以通过读写锁的方式来保证强一致性，在数据更新的时候，其他任何请求都无法访问缓存中的数据，直到数据更新完毕，从而去保证数据的强一致性，但是性能不佳。</p><hr><h3 id="二、redis中如何持久化数据" tabindex="-1">二、Redis中如何持久化数据？ <a class="header-anchor" href="#二、redis中如何持久化数据" aria-label="Permalink to &quot;二、Redis中如何持久化数据？&quot;">​</a></h3><hr><h4 id="_1、rdb" tabindex="-1">1、RDB <a class="header-anchor" href="#_1、rdb" aria-label="Permalink to &quot;1、RDB&quot;">​</a></h4><p>​ 这种方法是以一种快照的方式进行数据备份存储到磁盘中，具体的备份机制是用到一个<strong>写实复制技术</strong>，持久化操作时先fork一个子进程，在子进程中创建一个临时文件，对redis中的数据进行一个备份写入。持久化操作结束后我们用临时文件替换掉上次持久化结束的文件</p><p>​ <strong>优点</strong>：可以适用于略大一点的数据，节省磁盘空间，恢复速度快。</p><p>​ <strong>缺点</strong>：会有数据流失，在最后一次持久化过程中会有数据流失。 并且同时存在两个文件会略显臃肿</p><h4 id="_2、aof" tabindex="-1">2、AOF <a class="header-anchor" href="#_2、aof" aria-label="Permalink to &quot;2、AOF&quot;">​</a></h4><p>​ 这种方法是以一种追加的形式进行备份，aof会先将写命令追加到缓冲区内，缓冲区根据AOF的<strong>持久化策略</strong>同步到磁盘中，具体的持久化策略是我们可以设定：每写入一次就追加一次，或者按秒追加。当磁盘中文件大小过大时，会对aop进行一个压缩重写，删掉重复性的写命令。</p><p>​ <strong>优点</strong>：数据准确性得到保障，备份机制完善。</p><p>​ <strong>劣势</strong>：备份速度慢，同等数据集占用磁盘更大，恢复数据时更慢。</p><hr><h3 id="二、spring和核心思想中连接点-切点-切面" tabindex="-1">二、Spring和核心思想中连接点，切点，切面？ <a class="header-anchor" href="#二、spring和核心思想中连接点-切点-切面" aria-label="Permalink to &quot;二、Spring和核心思想中连接点，切点，切面？&quot;">​</a></h3><hr>`,668),i=a("p",null,"2、切入点是一些特使的连接点，是具体附加通知的地方。",-1),n=a("p",null,"3、切面是通知和切入点的结合，通知规定了在什么时机干什么事，切入点规定了在什么地方。",-1),s=a("h3",{id:"四、-inoodb-引擎的优缺点",tabindex:"-1"},[e("四、 Inoodb 引擎的优缺点 "),a("a",{class:"header-anchor",href:"#四、-inoodb-引擎的优缺点","aria-label":'Permalink to "四、 Inoodb 引擎的优缺点"'},"​")],-1),d=a("hr",null,null,-1),c=a("p",null,"主要区别包含以下三点：",-1),u=a("p",null,"​ 1> 数据存放位置不一样 MyIsm两个文件存储数据 Myd Myi 分别存储数据和索引",-1),b=a("p",null,"​ 2> 事务的支持 前者不支持事务 后者支持事务",-1),q=a("p",null,"​ 3> 外键的支持 同上",-1),m=a("p",null,"​ 4> 锁的支持 前者支持表锁 后者支持表锁 行锁 间隙锁 读写锁等",-1);function _(f,x,k,g,P,y){return l(),t("div",null,[h,e(" 1、连接点是在应用执行过程中能够插入切面（Aspect）的一个点。这些点可以是调用方法时、甚至修改一个字段时。它是一个虚拟的概念 "),i,n,s,d,e(" 1、 在MySQL 5.5 之前 一直用的 MyIsm 之后换为 Mysql "),c,u,b,q,m])}const w=p(o,[["render",_]]);export{M as __pageData,w as default};
